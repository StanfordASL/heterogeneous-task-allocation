#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\options onecolumn
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Predictive Task Allocation
\end_layout

\begin_layout Author
Saptarshi Bandyopadhyay
\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Standard
Predictive task allocation is the problem of assigning tasks to robotic
 agents based on their state/capabilities and on the uncertain distribution
 of future tasks.
 Predictive task allocation determines which robot or group of robots will
 perform each task based on the robotsâ€™ states (e.g., position, attitude,
 power-level) and capabilities (e.g., mobility, availability of appropriate
 sensor) and on the predicted distribution of future tasks (e.g.
 the predicted location of future areas of interest, or the likelihood that
 one of the robots will fail).
 Predictive task allocation can be used both for closely coupled coordination
 (e.g., deciding which robot takes what place in a formation) and for loosely
 coupled coordination (e.g., which robot traverses to a new spot to observe
 an interesting target).
\end_layout

\begin_layout Standard
The task allocation problem has long been of interest in the robotics community.
 Proposed decentralized solution techniques include auction algorithms,
 spatial partitioning algorithms, and Markov-chain based algorithms; centralized
 team-forming and temporal partitioning algorithms and centralized matching
 algorithms are also available.
 However, no algorithm is available to solve the predictive task allocation
 problem in a distributed manner for networks of heterogeneous agents (see
 Table).
\end_layout

\begin_layout Standard
Here we aim to design a near-optimal centralized algorithm for the predictive
 task allocation problem for the case where the probability distribution
 of the events that trigger new tasks is known a priori.
\end_layout

\begin_layout Section
Problem Statement
\end_layout

\begin_layout Subsection
Define variables
\end_layout

\begin_layout Itemize
We state this problem in discrete time.
 Let 
\begin_inset Formula $k$
\end_inset

 represent the time index, and 
\begin_inset Formula $T$
\end_inset

 is the total time.
 Therefore, 
\begin_inset Formula $k\in\left\{ 1,\ldots,T\right\} $
\end_inset

.
\end_layout

\begin_layout Itemize
The number of agents at time 
\begin_inset Formula $k$
\end_inset

 is represented by 
\begin_inset Formula $N_{k}$
\end_inset

.
 Let 
\begin_inset Formula $i_{k}$
\end_inset

 represent an agent index at time 
\begin_inset Formula $k$
\end_inset

, therefore 
\begin_inset Formula $i_{k}\in\left\{ 1,\ldots,N_{k}\right\} $
\end_inset

.
 These are heterogeneous agents with heterogeneous capabilities.
 
\end_layout

\begin_layout Itemize
The number of tasks at time 
\begin_inset Formula $k$
\end_inset

 is represented by 
\begin_inset Formula $M_{k}$
\end_inset

.
 Let 
\begin_inset Formula $j_{k}$
\end_inset

 represent a task index at time 
\begin_inset Formula $k$
\end_inset

, therefore 
\begin_inset Formula $j_{k}\in\left\{ 1,\ldots,M_{k}\right\} $
\end_inset

.
 Some of of these tasks are all-time tasks (e.g.
 patrolling) and some are event-driven tasks (e.g.
 tracking an intruder).
\end_layout

\begin_layout Itemize
Let 
\begin_inset Formula $x_{i_{k},j_{k}}$
\end_inset

 represent the indicator variable of agent 
\begin_inset Formula $i_{k}$
\end_inset

 doing task 
\begin_inset Formula $j_{k}$
\end_inset

, i.e., 
\begin_inset Formula $x_{i_{k},j_{k}}=1$
\end_inset

 if agent 
\begin_inset Formula $i_{k}$
\end_inset

 does task 
\begin_inset Formula $j_{k}$
\end_inset

 at time 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $x_{i_{k},j_{k}}=0$
\end_inset

 otherwise.
 
\end_layout

\begin_layout Itemize
Let 
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset

 represent the list of all actions taken by the agents from time 
\begin_inset Formula $1,\ldots,k-1$
\end_inset

, i.e., 
\begin_inset Formula 
\begin{equation}
\mathcal{X}_{1:k-1}=\left\{ x_{i_{\tau},j_{\tau}},\forall\tau\in\{1,\ldots,k-1\},\forall i_{\tau}\in\left\{ 1,\ldots,N_{\tau}\right\} ,\forall j_{\tau}\in\left\{ 1,\ldots,M_{\tau}\right\} \right\} 
\end{equation}

\end_inset


\end_layout

\begin_layout Itemize
Let the matrix 
\begin_inset Formula $C_{k,\mathcal{X}_{1:k-1}}\in\mathbb{R}^{N_{k}\times M_{k}}$
\end_inset

 represent the cost matrix at time 
\begin_inset Formula $k$
\end_inset

.
 The element 
\begin_inset Formula $C_{k,\mathcal{X}_{1:k-1}}\left[i_{k},j_{k}\right]$
\end_inset

 represents the value of doing task 
\begin_inset Formula $j_{k}$
\end_inset

 by agent 
\begin_inset Formula $i_{k}$
\end_inset

 at time 
\begin_inset Formula $k$
\end_inset

, which depends on the past actions 
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset

.
 It can be composed of 2 terms: 
\begin_inset Formula 
\begin{align}
C_{k,\mathcal{X}_{1:k-1}}\left[i_{k},j_{k}\right]= & \left(\textrm{Intrinsic value of doing the task }j_{k}\textrm{, which depends on }\mathcal{X}_{1:k-1}\right)\nonumber \\
 & \qquad\qquad-\left(\textrm{Effort incurred by agent }i_{k}\textrm{ to do the task }j_{k}\textrm{, which depends on }\mathcal{X}_{1:k-1}\right)\label{eq:define_C_k}
\end{align}

\end_inset

Here 
\begin_inset Quotes eld
\end_inset

intrinsic value of doing the task 
\begin_inset Formula $j_{k}$
\end_inset


\begin_inset Quotes erd
\end_inset

 captures the importance of the task, e.g., patrolling an area is significantly
 lower importance than checking out an intruder, but patrolling an area
 that hasn't been visited in some time is more valuable than patrolling
 a recently visited area.
 
\begin_inset Quotes eld
\end_inset

Effort incurred by agent 
\begin_inset Formula $i_{k}$
\end_inset

 to do the task 
\begin_inset Formula $j_{k}$
\end_inset


\begin_inset Quotes erd
\end_inset

 captures if an agent can do the task (if not, then it is set to 
\begin_inset Formula $\infty$
\end_inset

) and how much effort does it need to expend, e.g., tasks which need the agent
 to travel large distances should cost more.
 
\end_layout

\begin_layout Subsection
Additional comments about variables
\end_layout

\begin_layout Standard
We now state some important aspects on tasks and costs:
\end_layout

\begin_layout Itemize
If the same task 
\begin_inset Formula $j_{k}$
\end_inset

 is present in time 
\begin_inset Formula $k$
\end_inset

 and time 
\begin_inset Formula $k+1$
\end_inset

, and it was not done at time 
\begin_inset Formula $k$
\end_inset

, then 
\begin_inset Quotes eld
\end_inset

intrinsic value of doing the task 
\begin_inset Formula $j_{k}$
\end_inset


\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\leq$
\end_inset

 
\begin_inset Quotes eld
\end_inset

intrinsic value of doing the task 
\begin_inset Formula $j_{k+1}$
\end_inset


\begin_inset Quotes erd
\end_inset

 (e.g., a region that hasn't been patrolled at time 
\begin_inset Formula $k$
\end_inset

 will have more intrinsic value at time 
\begin_inset Formula $k+1$
\end_inset

)
\end_layout

\begin_layout Itemize
New tasks 
\begin_inset Formula $j_{k}$
\end_inset

 could get created at time 
\begin_inset Formula $k$
\end_inset

 with some known probability distribution.
 (e.g., intruder could enter the controlled space)
\end_layout

\begin_layout Itemize
Doing task 
\begin_inset Formula $j_{k}$
\end_inset

 could trigger/create multiple task at time 
\begin_inset Formula $k+1$
\end_inset

.
 (e.g., after checking out an intruder to be friendly or not-friendly, different
 tasks are triggered)
\end_layout

\begin_layout Itemize
Some un-done task from time 
\begin_inset Formula $k$
\end_inset

 could be destroyed at time 
\begin_inset Formula $k+1$
\end_inset

.
 (e.g., intruder leaving the controlled space)
\end_layout

\begin_layout Itemize
Agents could be created or destroyed at any time 
\begin_inset Formula $k$
\end_inset

 (e.g., agent fails, or new agent is added)
\end_layout

\begin_layout Itemize
The cost function 
\begin_inset Formula $C_{k,\mathcal{X}_{1:k-1}}\left[i_{k},j_{k}\right]$
\end_inset

 at time 
\begin_inset Formula $k$
\end_inset

 depends on 
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset

, i.e., the previous actions taken at times 
\begin_inset Formula $1,\ldots,k-1$
\end_inset


\end_layout

\begin_layout Subsection
State Nonlinear Optimization Problem
\end_layout

\begin_layout Standard
Finally, we are ready to state the predictive task allocation problem:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\underset{x_{i_{k},j_{k}\thinspace\forall i_{k},\forall j_{k},\forall k}}{\textrm{maximize}} & \sum_{k=1}^{T}\sum_{i_{k}=1}^{N_{k}}\sum_{j_{k}=1}^{M_{k}}C_{k,\mathcal{X}_{1:k-1}}\left[i_{k},j_{k}\right]x_{i_{k},j_{k}}\label{eq:maximize_net_value}\\
\textrm{subject to}\nonumber \\
 & \sum_{i_{k}=1}^{N_{k}}x_{i_{k},j_{k}}\leq1 &  & \forall j_{k}\in\left\{ 1,\ldots,M_{k}\right\} ,\forall k\in\left\{ 1,\ldots,T\right\} \label{eq:task_done_by_one_agent}\\
 & \sum_{j_{k}=1}^{M_{k}}x_{i_{k},j_{k}}\leq1 &  & \forall i_{k}\in\left\{ 1,\ldots,N_{k}\right\} ,\forall k\in\left\{ 1,\ldots,T\right\} \label{eq:agent_does_one_task}\\
 & x_{i_{k},j_{k}}\in\left\{ 0,1\right\}  &  & \forall i_{k}\in\left\{ 1,\ldots,N_{k}\right\} ,\forall j_{k}\in\left\{ 1,\ldots,M_{k}\right\} ,\forall k\in\left\{ 1,\ldots,T\right\} \label{eq:indicator_variable}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{10pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:agent_does_one_task"

\end_inset

) represents that an agent can do only 1 task at a time step.
 (Is this need? Can an agent do all the tasks at that location? For example,
 both patrolling and checking out an intruder at the same location? In this
 case, we can collect all the tasks at the same location and call it a combined
 task.
 But capabilities of heterogeneous agents will come into play here when
 we do the combining.)
\end_layout

\begin_layout Itemize
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:task_done_by_one_agent"

\end_inset

) represents that a task can be done by only 1 agent at a time step.
 
\end_layout

\begin_layout Section
Possible Simplifying Assumptions
\end_layout

\begin_layout Subsection
Option 1: Assume 
\begin_inset Formula $C_{k,\mathcal{X}_{1:k-1}}\rightarrow C_{k}$
\end_inset

, i.e., remove the dependence on 
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset


\end_layout

\begin_layout Standard
This will reduce the problem to a MILP.
 In my opinion, this is a bad assumption because it removes the entire complexit
y of the problem we are trying to address:
\end_layout

\begin_layout Itemize
In the definition 
\begin_inset Formula $C_{k,\mathcal{X}_{1:k-1}}\left[i_{k},j_{k}\right]$
\end_inset

 in Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:define_C_k"

\end_inset

), 
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset

 ensures that the intrinsic value of doing the task increases if it hasn't
 been done in the previous time.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset

 ensures that the effort incurred by agent 
\begin_inset Formula $i_{k}$
\end_inset

 to do the task 
\begin_inset Formula $j_{k}$
\end_inset

 depends on the current state of the agent.
 e.g., tasks which need the agent to travel large distances should cost more.
 This is necessary for the predictive part of the problem statement.
 
\end_layout

\begin_layout Subsection
Option 2: Simplistic Assumption on Tasks
\end_layout

\begin_layout Standard
Let us assume that at the 
\begin_inset Formula $k^{\textrm{th}}$
\end_inset

 time instant, 
\begin_inset Formula $M_{k}$
\end_inset

 tasks are generated with some probability.
 The cost of doing a task depends on the intrinsic value of doing the task
 
\begin_inset Formula $j_{k}$
\end_inset

 (which does NOT depend on 
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset

) and on the agents current location at the start of the 
\begin_inset Formula $k^{\textrm{th}}$
\end_inset

 time instant.
\end_layout

\begin_layout Standard
All the agents try to do some the tasks at this time instant.
 The remaining undone tasks vanishes at the end of 
\begin_inset Formula $k^{\textrm{th}}$
\end_inset

 time instant.
 
\end_layout

\begin_layout Standard
We feel this problem captures the core essence of the original problem.
 Here are the advantages of this assumption:
\end_layout

\begin_layout Itemize
We are ignoring deterministic tasks.
 We claim that they can be easily added back.
 
\end_layout

\begin_layout Itemize
We are ignoring recurrent tasks (like patrolling), whose intrinsic value
 depends on 
\begin_inset Formula $\mathcal{X}_{1:k-1}$
\end_inset

.
 Adding this back will be difficult, but not impossible.
 
\end_layout

\begin_layout Itemize
This problem can be solved using Approximate DP.
 
\end_layout

\begin_layout Standard
My main concern with Approximate DP is that we are losing the rigorousness
 of the DP.
 How do we show our solution is good? 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Task Assignment for Homogeneous Agents to Tasks at One Time Step
\end_layout

\begin_layout Standard
The state space is divided into 
\begin_inset Formula $n_{\textrm{cell}}\in\mathbb{N}$
\end_inset

 cells.
 
\end_layout

\begin_layout Standard
There are 
\begin_inset Formula $N$
\end_inset

 agents at time step 
\begin_inset Formula $t_{0}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The cost of an agent to move from cell 
\begin_inset Formula $i$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

 is given by 
\begin_inset Formula $C[i,j]$
\end_inset

, where 
\begin_inset Formula $i,j\in\{1,\ldots,n_{\textrm{cell}}\}$
\end_inset

.
 If an agent cannot transition from cell 
\begin_inset Formula $i$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

, then 
\begin_inset Formula $C[i,j]=\infty$
\end_inset

.
\end_layout

\begin_layout Standard
There are M tasks at time step 
\begin_inset Formula $t_{1}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The reward incurred by an agent in cell 
\begin_inset Formula $j$
\end_inset

 is given by 
\begin_inset Formula $R[j]$
\end_inset

.
 If there is no task in cell 
\begin_inset Formula $j$
\end_inset

, then 
\begin_inset Formula $R[j]=0$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename simple_assignment.png
	width 5in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Simple Assignment Problem
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $x[i,j]$
\end_inset

 represent the indicator variable that an agent moves from cell 
\begin_inset Formula $i$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

.
 
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $A[i]$
\end_inset

 represent the indicator variable that an agent is present in cell 
\begin_inset Formula $i$
\end_inset

 at time step 
\begin_inset Formula $t_{0}$
\end_inset

.
\end_layout

\begin_layout Standard
Our objective is the maximize the (reward - cost) gained by the agents.
 
\end_layout

\begin_layout Standard
The assignment problem is given by the following ILP:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\underset{x[i,j],\thinspace\forall i,j\in\{1,\ldots,n_{\textrm{cell}}\}}{\textrm{maximize}} & \left(\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}\left(R[j]\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x[i,j]\right)\right)\nonumber \\
 & \qquad\qquad-\left(\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}C[i,j]\thinspace x[i,j]\right)\\
\textrm{subject to}\nonumber \\
 & x[i,j]\in\{0,1\} &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\}\label{eq:integer_condition}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x[i,j]\leq1 &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\}\label{eq:agent_in_one_cell}\\
 & \sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}x[i,j]=A[i] &  & \forall i\in\{1,\ldots,n_{\textrm{cell}}\}\label{eq:initial_conditions}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:agent_in_one_cell"

\end_inset

) ensures that at most 1 agent can be in any cell.
 
\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:initial_conditions"

\end_inset

) ensures that initial conditions are satisfied.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We could also state this problem as a LP:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\underset{x[i,j],\thinspace\forall i,j\in\{1,\ldots,n_{\textrm{cell}}\}}{\textrm{maximize}} & \left(\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}\left(R[j]\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x[i,j]\right)\right)\nonumber \\
 & \qquad\qquad-\left(\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}C[i,j]\thinspace x[i,j]\right)\\
\textrm{subject to}\nonumber \\
 & x[i,j]\geq0 &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\}\label{eq:LP_cond_1}\\
 & x[i,j]\leq1 &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\}\label{eq:LP_cond_2}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x[i,j]\leq1 &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\}\\
 & \sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}x[i,j]=A[i] &  & \forall i\in\{1,\ldots,n_{\textrm{cell}}\}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:LP_cond_1"

\end_inset

) and (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:LP_cond_2"

\end_inset

) convert the integer constraint in Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:integer_condition"

\end_inset

) into linear constraints.
 
\end_layout

\begin_layout Standard
The solution of this LP is the same as the above ILP.
 This can be proved using Total Unimodularity.
\begin_inset Foot
status open

\begin_layout Plain Layout
Totally unimodular matrices give a quick way to verify that a linear program
 is integral.
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Unimodular_matrix#Total_unimodularity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Task Assignment for Homogeneous Agents to Tasks in Multiple Time Steps
\end_layout

\begin_layout Standard
The state space is divided into 
\begin_inset Formula $n_{\textrm{cell}}\in\mathbb{N}$
\end_inset

 cells.
 
\end_layout

\begin_layout Standard
There are 
\begin_inset Formula $N$
\end_inset

 agents at time step 
\begin_inset Formula $t_{0}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $t_{F}$
\end_inset

 be the final time step for this lookahead policy.
 Hence the time steps are 
\begin_inset Formula $\{t_{0},t_{1},\ldots,t_{F}\}$
\end_inset

.
\end_layout

\begin_layout Standard
The cost of an agent to move from cell 
\begin_inset Formula $i$
\end_inset

 in time step 
\begin_inset Formula $t_{(k-1)}$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

 is given by 
\begin_inset Formula $C_{k}[i,j]$
\end_inset

, where 
\begin_inset Formula $i,j\in\{1,\ldots,n_{\textrm{cell}}\}$
\end_inset

 and 
\begin_inset Formula $k\in\{1,\ldots,F\}$
\end_inset

.
 If an agent cannot transition from cell 
\begin_inset Formula $i$
\end_inset

 in time step 
\begin_inset Formula $t_{(k-1)}$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

, then 
\begin_inset Formula $C_{k}[i,j]=\infty$
\end_inset

.
\end_layout

\begin_layout Standard
There are 
\begin_inset Formula $M_{k}$
\end_inset

 tasks at time step 
\begin_inset Formula $t_{k}$
\end_inset

, where 
\begin_inset Formula $k\in\{1,\ldots,F\}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The reward incurred by an agent in cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

 is given by 
\begin_inset Formula $R_{k}[j]$
\end_inset

.
 If there is no task in cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

, then 
\begin_inset Formula $R_{k}[j]=0$
\end_inset

.
\end_layout

\begin_layout Standard
The reward incurred by an agent in cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{F}$
\end_inset

 is given by 
\begin_inset Formula $R_{F}[j]$
\end_inset

, where 
\begin_inset Formula $R_{F}[j]$
\end_inset

 is an approximation of the future reward that the agent might get from
 that location.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename multi_step_assignment.png
	width 6in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Multiple-Step Assignment Problem
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $x_{k}[i,j]$
\end_inset

 represent the indicator variable that an agent moves from cell 
\begin_inset Formula $i$
\end_inset

 in time step 
\begin_inset Formula $t_{(k-1)}$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $A[i]$
\end_inset

 represent the indicator variable that an agent is present in cell 
\begin_inset Formula $i$
\end_inset

 at time step 
\begin_inset Formula $t_{0}$
\end_inset

.
\end_layout

\begin_layout Standard
Our objective is the maximize the (reward - cost) gained by the agents over
 multiple time steps.
 
\end_layout

\begin_layout Standard
The assignment problem is given by the following ILP:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\underset{\begin{array}{c}
x_{k}[i,j],\thinspace\forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\\
\forall k\in\{1,\ldots,F\}
\end{array}}{\textrm{maximize}} & \sum_{k\in\{1,\ldots F\}}\left(\left(\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}\left(R_{k}[j]\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}[i,j]\right)\right)\right.\nonumber \\
 & \qquad\qquad-\left.\left(\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}C_{k}[i,j]\thinspace x_{k}[i,j]\right)\right)
\end{align}

\end_inset


\begin_inset Formula 
\begin{align}
\textrm{subject to}\nonumber \\
 & x_{k}[i,j]\in\{0,1\} &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\}\label{eq:integer_condition-multi}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}[i,j]\leq1 &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\}\label{eq:agent_in_one_cell-multi}\\
 & \sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}x_{1}[i,j]=A[i] &  & \forall i\in\{1,\ldots,n_{\textrm{cell}}\}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}[i,j]=\sum_{i\in n_{\textrm{cell}}}x_{k+1}[i,j] &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F-1\}\label{eq:flow_conservation}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:agent_in_one_cell-multi"

\end_inset

) ensures that at most 1 agent can be in any cell at any time step.
 
\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:flow_conservation"

\end_inset

) ensures that equal number of agents are entering and exiting a cell.
 This is used to conserve the number of agents.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{10pt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We could also state this problem as a LP:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\underset{\begin{array}{c}
x_{k}[i,j],\thinspace\forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\\
\forall k\in\{1,\ldots,F\}
\end{array}}{\textrm{maximize}} & \sum_{k\in\{1,\ldots F\}}\left(\left(\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}\left(R_{k}[j]\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}[i,j]\right)\right)\right.\nonumber \\
 & \qquad\qquad-\left.\left(\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}C_{k}[i,j]\thinspace x_{k}[i,j]\right)\right)
\end{align}

\end_inset


\begin_inset Formula 
\begin{align}
\textrm{subject to}\nonumber \\
 & x_{k}[i,j]\geq0 &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\}\label{eq:LP_cond_1-multi}\\
 & x_{k}[i,j]\leq1 &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\}\label{eq:LP_cond_2-multi}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}[i,j]\leq1 &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\}\\
 & \sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}x_{1}[i,j]=A[i] &  & \forall i\in\{1,\ldots,n_{\textrm{cell}}\}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}[i,j]=\sum_{i\in n_{\textrm{cell}}}x_{k+1}[i,j] &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F-1\}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:LP_cond_1-multi"

\end_inset

) and (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:LP_cond_2-multi"

\end_inset

) convert the integer constraint in Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:integer_condition-multi"

\end_inset

) into linear constraints.
 
\end_layout

\begin_layout Standard
We think the solution of this LP is the same as the above ILP.
\end_layout

\begin_layout Standard
Note that this formulation already accepts predictive tasks and deterministic
 tasks.
 
\end_layout

\begin_layout Section
Task Assignment for Heterogeneous Agents to Tasks in Multiple Time Steps
\end_layout

\begin_layout Standard
The state space is divided into 
\begin_inset Formula $n_{\textrm{cell}}\in\mathbb{N}$
\end_inset

 cells.
 
\end_layout

\begin_layout Standard
There are 
\begin_inset Formula $N$
\end_inset

 heterogeneous agents at time step 
\begin_inset Formula $t_{0}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The agents are partitioned into 
\begin_inset Formula $Q$
\end_inset

 types, based on their capabilities.
 
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $t_{F}$
\end_inset

 be the final time step for this lookahead policy.
 Hence the time steps are 
\begin_inset Formula $\{t_{0},t_{1},\ldots,t_{F}\}$
\end_inset

.
\end_layout

\begin_layout Standard
The cost of an agent of type 
\begin_inset Formula $q$
\end_inset

 to move from cell 
\begin_inset Formula $i$
\end_inset

 in time step 
\begin_inset Formula $t_{(k-1)}$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

 is given by 
\begin_inset Formula $C_{k}^{q}[i,j]$
\end_inset

, where 
\begin_inset Formula $i,j\in\{1,\ldots,n_{\textrm{cell}}\}$
\end_inset

 and 
\begin_inset Formula $k\in\{1,\ldots,F\}$
\end_inset

 and 
\begin_inset Formula $q\in\{1,\ldots,Q\}$
\end_inset

.
 If an agent of type 
\begin_inset Formula $q$
\end_inset

 cannot transition from cell 
\begin_inset Formula $i$
\end_inset

 in time step 
\begin_inset Formula $t_{(k-1)}$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

, then 
\begin_inset Formula $C_{k}^{q}[i,j]=\infty$
\end_inset

.
\end_layout

\begin_layout Standard
There are 
\begin_inset Formula $M_{k}$
\end_inset

 tasks at time step 
\begin_inset Formula $t_{k}$
\end_inset

, where 
\begin_inset Formula $k\in\{1,\ldots,F\}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The reward incurred by an agent of type 
\begin_inset Formula $q$
\end_inset

 in cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

 is given by 
\begin_inset Formula $R_{k}^{q}[j]$
\end_inset

.
 If there is no task in cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

, then 
\begin_inset Formula $R_{k}^{q}[j]=0$
\end_inset

.
\end_layout

\begin_layout Standard
The reward incurred by an agent of type 
\begin_inset Formula $q$
\end_inset

 in cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{F}$
\end_inset

 is given by 
\begin_inset Formula $R_{F}^{q}[j]$
\end_inset

, where 
\begin_inset Formula $R_{F}^{q}[j]$
\end_inset

 is an approximation of the future reward that the agent of type 
\begin_inset Formula $q$
\end_inset

 might get from that location.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename heterogeneous_multi_step_assignment.png
	width 6in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Heterogeneous Multiple-Step Assignment Problem
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $x_{k}^{q}[i,j]$
\end_inset

 represent the indicator variable that an agent of type 
\begin_inset Formula $q$
\end_inset

 moves from cell 
\begin_inset Formula $i$
\end_inset

 in time step 
\begin_inset Formula $t_{(k-1)}$
\end_inset

 to cell 
\begin_inset Formula $j$
\end_inset

 in time step 
\begin_inset Formula $t_{k}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $A^{q}[i]$
\end_inset

 represent the indicator variable that an agent of type 
\begin_inset Formula $q$
\end_inset

 is present in cell 
\begin_inset Formula $i$
\end_inset

 at time step 
\begin_inset Formula $t_{0}$
\end_inset

.
\end_layout

\begin_layout Standard
Our objective is the maximize the (reward - cost) gained by the agents over
 multiple time steps.
 
\end_layout

\begin_layout Standard
The assignment problem is given by the following ILP:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\underset{\begin{array}{c}
x_{k}^{q}[i,j],\thinspace\forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\\
\forall k\in\{1,\ldots,F\},\thinspace q\in\{1,\ldots,Q\}
\end{array}}{\textrm{maximize}} & \sum_{k\in\{1,\ldots F\}}\left(\left(\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}\left(\sum_{q\in\{1,\ldots,Q\}}\left(R_{k}^{q}[j]\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}^{q}[i,j]\right)\right)\right)\right.\nonumber \\
 & \qquad\qquad-\left.\left(\sum_{q\in\{1,\ldots,Q\}}\left(\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}C_{k}^{q}[i,j]\thinspace x_{k}^{q}[i,j]\right)\right)\right)
\end{align}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\textrm{subject to}\nonumber \\
 & x_{k}^{q}[i,j]\in\{0,1\} &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\},\thinspace q\in\{1,\ldots,Q\}\label{eq:integer_condition-multi-hetero}\\
 & \sum_{q\in\{1,\ldots,Q\}}\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}^{q}[i,j]\leq1 &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\}\label{eq:agent_in_one_cell-multi-hetero}\\
 & \sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}x_{1}^{q}[i,j]=A^{q}[i] &  & \forall i\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace q\in\{1,\ldots,Q\}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}^{q}[i,j]=\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k+1}^{q}[i,j] &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F-1\},\thinspace q\in\{1,\ldots,Q\}\label{eq:flow_conservation-hetero}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:agent_in_one_cell-multi-hetero"

\end_inset

) ensures that at most 1 agent of any type can be in any cell at any time
 step.
 
\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:flow_conservation-hetero"

\end_inset

) ensures that equal number of agents of a given type are entering and exiting
 a cell.
 This is used to conserve the number of agents.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{10pt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We could also state this problem as a LP:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\underset{\begin{array}{c}
x_{k}^{q}[i,j],\thinspace\forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\\
\forall k\in\{1,\ldots,F\},\thinspace q\in\{1,\ldots,Q\}
\end{array}}{\textrm{maximize}} & \sum_{k\in\{1,\ldots F\}}\left(\left(\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}\left(\sum_{q\in\{1,\ldots,Q\}}\left(R_{k}^{q}[j]\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}^{q}[i,j]\right)\right)\right)\right.\nonumber \\
 & \qquad\qquad-\left.\left(\sum_{q\in\{1,\ldots,Q\}}\left(\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}\sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}C_{k}^{q}[i,j]\thinspace x_{k}^{q}[i,j]\right)\right)\right)
\end{align}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
\textrm{subject to}\nonumber \\
 & x_{k}^{q}[i,j]\geq0 &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\},\thinspace q\in\{1,\ldots,Q\}\label{eq:LP_cond_1-multi-hetero}\\
 & x_{k}^{q}[i,j]\leq1 &  & \forall i,j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\},\thinspace q\in\{1,\ldots,Q\}\label{eq:LP_cond_2-multi-hetero}\\
 & \sum_{q\in\{1,\ldots,Q\}}\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}^{q}[i,j]\leq1 &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F\}\\
 & \sum_{j\in\{1,\ldots,n_{\textrm{cell}}\}}x_{1}^{q}[i,j]=A^{q}[i] &  & \forall i\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace q\in\{1,\ldots,Q\}\\
 & \sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k}^{q}[i,j]=\sum_{i\in\{1,\ldots,n_{\textrm{cell}}\}}x_{k+1}^{q}[i,j] &  & \forall j\in\{1,\ldots,n_{\textrm{cell}}\},\thinspace\forall k\in\{1,\ldots,F-1\},\thinspace q\in\{1,\ldots,Q\}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:LP_cond_1-multi-hetero"

\end_inset

) and (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:LP_cond_2-multi-hetero"

\end_inset

) convert the integer constraint in Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:integer_condition-multi-hetero"

\end_inset

) into linear constraints.
 
\end_layout

\begin_layout Standard
We DONOT think the solution of this LP is the same as the above ILP, because
 of the flow mixing in Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:flow_conservation-hetero"

\end_inset

).
 But this fraction solution might be good enough since the tasks are also
 probabilistic.
 
\end_layout

\begin_layout Standard
Note that this formulation already accepts predictive tasks and deterministic
 tasks.
 
\end_layout

\end_body
\end_document
